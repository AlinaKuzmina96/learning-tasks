Хранение метрик

Разработаем свою систему для сбора метрик - сервер и клиент.
Клиент и сервер должны взаимодействовать между собой по простому текстовому протоколу через TCP сокеты. 

Необходимо реализовать две команды:
put - для сохранения метрик на сервере.
get - для получения метрик.
Формат команды put для отправки метрик — это строка вида:
put <key> <value> <timestamp>\n
Успешный ответ от сервера:
ok\n\n
Ошибка сервера:
error\nwrong command\n\n
Формат команды get для получения метрик — это строка вида:
get <key>\n
В качестве ключа можно указывать символ *, для этого символа будут возвращены все доступные метрики. В данном задании мы никак не ограничиваем 
количество метрик, которые должен вернуть сервер – сервер должен возвращать все метрики, удовлетворяющие ключу.
Успешный ответ от сервера:
ok\npalm.cpu 10.5 1501864247\neardrum.cpu 15.3 1501864259\n\n
Если ни одна метрика не удовлетворяет условиям поиска, то вернется ответ:
ok\n\n

Реализация клиента.
Необходимо реализовать класс Client, в котором будет инкапсулировано соединение с сервером, клиентский сокет и методы для получения и отправки 
метрик на сервер. В конструктор класса Client должна передаваться адресная пара хост и порт, а также необязательный аргумент timeout 
(timeout=None по умолчанию). У класса Client должно быть 2 метода: put и get, соответствующих протоколу выше.
Клиент получает данные в текстовом виде, метод get должен возвращать словарь с полученными ключами с сервера. Значением ключа в словаре 
является список кортежей [(timestamp, metric_value), ...], отсортированный по timestamp от меньшего к большему. Значение timestamp должно 
быть преобразовано к целому числу int. Значение метрики metric_value нужно преобразовать к числу с плавающей точкой float.
Метод put принимает первым аргументом название метрики, вторым численное значение, третьим - необязательный именованный аргумент timestamp. 
Если пользователь вызвал метод put без аргумента timestamp, то клиент автоматически должен подставить текущее время в команду put - 
str(int(time.time()))

Сервер должен уметь принимать от клиентов команды put и get, разбирать их, и формировать ответ согласно протоколу. По запросу put требуется 
сохранять метрики в структурах данных в памяти процесса. По запросу get сервер обязан отдавать данные в правильной последовательности.
На верхнем уровне вашего модуля должна быть объявлена функция run_server(host, port) — она принимает адрес и порт, на которых должен быть 
запущен сервер.

