"""
Вам дано описание наследования классов в следующем формате.
<имя класса 1> : <имя класса 2> <имя класса 3> ... <имя класса k>
Это означает, что класс 1 отнаследован от класса 2, класса 3, и т. д.
Класс A является прямым предком класса B, если B отнаследован от A:
Класс A является предком класса B, если
    A = B;
    A - прямой предок B
    существует такой класс C, что C - прямой предок B и A - предок C
Вам необходимо отвечать на запросы, является ли один класс предком другого класса
В первой строке входных данных содержится целое число n - число классов.
В следующих n строках содержится описание наследования классов. В i-й строке указано от каких классов наследуется i-й класс.
Обратите внимание, что класс может ни от кого не наследоваться. Гарантируется, что класс не наследуется сам от себя (прямо или косвенно),
что класс не наследуется явно от одного класса более одного раза.
В следующей строке содержится число q - количество запросов.
В следующих q строках содержится описание запросов в формате <имя класса 1> <имя класса 2>.
Имя класса – строка, состоящая из символов латинского алфавита, длины не более 50.
Для каждого запроса выведите в отдельной строке слово "Yes", если класс 1 является предком класса 2, и "No", если не является.
"""

n = int(input())
s = {}
for i in range(n):
    a = input().split()
    l = len(a)
    s.update({a[0]: []})
    i = l-1
    if ':' in a:
    	while a[i] != ':':
    		s[a[0]].append(a[i])
    		i -= 1
for i in s.keys():
	for j in s[i]:
		if str(j) in s.keys():
			w = s[j]
			l = len(w)
			for k in range(l):
				s[i].append(str(w[k]))

def pro(a, b):
	if str(a) in s[str(b)]:
		return 'Yes'
	else:
		return 'No'

q = int(input())
for i in range(q):
	b = input().split()
	if b[1] not in s:
		print('No')
	else:
		if b[0] == b[1]:
			print('Yes')
		else:
			print(pro(b[0], b[1]))