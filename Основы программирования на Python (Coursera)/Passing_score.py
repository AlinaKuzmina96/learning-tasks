"""Для поступления в вуз абитуриент должен предъявить результаты трех экзаменов в виде 
ГЭ, каждый из них оценивается целым числом от 0 до 100 баллов. При этом абитуриенты, 
набравшие менее 40 баллов (неудовлетворительную оценку) по любому экзамену из конкурса 
выбывают. Остальные абитуриенты участвуют в конкурсе по сумме баллов за три экзамена.
В конкурсе участвует N человек, при этом количество мест равно K. Определите проходной 
балл, то есть такое количество баллов, что количество участников, набравших столько или 
больше баллов не превосходит K, а при добавлении к ним абитуриентов, набравших наибольшее
количество баллов среди непринятых абитуриентов, общее число принятых абитуриентов станет 
больше K.
Программа должна вывести проходной балл в конкурсе. Выведенное значение должно быть 
минимальным баллом, который набрал абитуриент, прошедший по конкурсу.
Также возможны две ситуации, когда проходной балл не определен.
Если будут зачислены все абитуриенты, не имеющие неудовлетворительных оценок, программа 
должна вывести число 0.
Если количество имеющих равный максимальный балл абитуриентов больше чем K, программа 
должна вывести число 1."""

lst = []
with open("input.txt", "r", encoding='utf8') as f:
    k = int(f.readline().strip())
    for line in f:
        line = line.strip().split()
        if int(line[-1]) >= 40 and int(line[-2]) >= 40 and int(line[-3]) >= 40:
            lst += [line]

for i in lst:
    i.append(int(i[-1]) + int(i[-2]) + int(i[-3]))

max_b = max(lst, key=lambda x: x[-1])[-1]
c = 0
for i in lst:
    if i[-1] == max_b:
        c += 1

s = ''

lst_sort = sorted(lst, key=lambda x: x[-1], reverse=True)


if len(lst) <= k:
    s += "0"
elif c > k:
    s += '1'
else:
    if lst_sort[k-1][-1] == lst_sort[k][-1]:
        i = 0
        while lst_sort[i][-1] != lst_sort[k-1][-1]:
            i += 1
        s += str(lst_sort[i-1][-1])
    else:
        s += str(lst_sort[k-1][-1])

with open("output.txt", "w", encoding='utf8') as g:
    g.write(s)
